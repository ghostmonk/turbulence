name: Deploy to GCP

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      deploy-backend:
        description: 'Deploy Backend'
        type: boolean
        default: false
      deploy-frontend:
        description: 'Deploy Frontend'
        type: boolean
        default: false
      deploy-video-function:
        description: 'Deploy Video Function'
        type: boolean
        default: false
      deploy-all:
        description: 'Deploy All Components'
        type: boolean
        default: false

jobs:
  # Detect what changed (for push) or manual selection (for workflow_dispatch)
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.determine-deploy.outputs.backend }}
      frontend: ${{ steps.determine-deploy.outputs.frontend }}
      video-function: ${{ steps.determine-deploy.outputs.video-function }}
    steps:
      - name: Checkout code
        if: github.event_name == 'push'
        uses: actions/checkout@v3
        with:
          fetch-depth: 2  # Need at least 2 commits to compare

      - name: Detect file changes
        if: github.event_name == 'push'
        uses: dorny/paths-filter@v2
        id: detect-changes
        with:
          filters: |
            backend:
              - 'backend/**'
              - '.github/workflows/deploy*.yml'
            frontend:
              - 'frontend/**'
              - '.github/workflows/deploy*.yml'
            video-function:
              - 'cloud-functions/**'
              - '.github/workflows/deploy*.yml'

      - name: Determine what to deploy
        id: determine-deploy
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "Manual deployment triggered"
            
            # Check deploy-all first
            if [ "${{ github.event.inputs.deploy-all }}" == "true" ]; then
              echo "backend=true" >> $GITHUB_OUTPUT
              echo "frontend=true" >> $GITHUB_OUTPUT
              echo "video-function=true" >> $GITHUB_OUTPUT
              echo "üöÄ Manual: Deploying ALL components"
            else
              # Individual selections
              echo "backend=${{ github.event.inputs.deploy-backend }}" >> $GITHUB_OUTPUT
              echo "frontend=${{ github.event.inputs.deploy-frontend }}" >> $GITHUB_OUTPUT
              echo "video-function=${{ github.event.inputs.deploy-video-function }}" >> $GITHUB_OUTPUT
              echo "üéØ Manual: Backend=${{ github.event.inputs.deploy-backend }}, Frontend=${{ github.event.inputs.deploy-frontend }}, Video=${{ github.event.inputs.deploy-video-function }}"
            fi
          else
            echo "Automatic deployment based on file changes"
            # Use the path detection results
            echo "backend=${{ steps.detect-changes.outputs.backend }}" >> $GITHUB_OUTPUT
            echo "frontend=${{ steps.detect-changes.outputs.frontend }}" >> $GITHUB_OUTPUT
            echo "video-function=${{ steps.detect-changes.outputs.video-function }}" >> $GITHUB_OUTPUT
            echo "üìÅ Auto: Backend=${{ steps.detect-changes.outputs.backend }}, Frontend=${{ steps.detect-changes.outputs.frontend }}, Video=${{ steps.detect-changes.outputs.video-function }}"
          fi

  # Smart deployment with matrix strategy
  deploy:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: |
      needs.detect-changes.outputs.backend == 'true' ||
      needs.detect-changes.outputs.frontend == 'true' ||
      needs.detect-changes.outputs.video-function == 'true'
    strategy:
      fail-fast: false
      matrix:
        include:
          - component: backend
          - component: frontend  
          - component: video-function
    
    steps:
      - name: Check if component should deploy
        id: should-deploy
        run: |
          case "${{ matrix.component }}" in
            "backend")
              if [ "${{ needs.detect-changes.outputs.backend }}" == "true" ]; then
                echo "deploy=true" >> $GITHUB_OUTPUT
                echo "‚úÖ Backend has changes - will deploy"
              else
                echo "deploy=false" >> $GITHUB_OUTPUT
                echo "‚è≠Ô∏è Backend has no changes - will skip"
              fi
              ;;
            "frontend")
              if [ "${{ needs.detect-changes.outputs.frontend }}" == "true" ]; then
                echo "deploy=true" >> $GITHUB_OUTPUT
                echo "‚úÖ Frontend has changes - will deploy"
              else
                echo "deploy=false" >> $GITHUB_OUTPUT
                echo "‚è≠Ô∏è Frontend has no changes - will skip"
              fi
              ;;
            "video-function")
              if [ "${{ needs.detect-changes.outputs.video-function }}" == "true" ]; then
                echo "deploy=true" >> $GITHUB_OUTPUT
                echo "‚úÖ Video Function has changes - will deploy"
              else
                echo "deploy=false" >> $GITHUB_OUTPUT
                echo "‚è≠Ô∏è Video Function has no changes - will skip"
              fi
              ;;
          esac

      - name: Checkout code
        if: steps.should-deploy.outputs.deploy == 'true'
        uses: actions/checkout@v3

      - name: Authenticate to GCP
        if: steps.should-deploy.outputs.deploy == 'true'
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

      - name: Install Google Cloud CLI
        if: steps.should-deploy.outputs.deploy == 'true'
        run: |
          echo "Installing Google Cloud CLI..."
          sudo apt-get update
          sudo apt-get install -y google-cloud-cli

      - name: Deploy Backend
        if: matrix.component == 'backend' && steps.should-deploy.outputs.deploy == 'true'
        run: |
          echo "üöÄ Deploying Backend (files changed)"
          gcloud builds submit ./backend --tag gcr.io/${{ vars.GCP_PROJECT_ID }}/turbulent-service
          
          # Encode the JSON to base64 to avoid parsing issues
          GCP_CREDS_B64=$(echo '${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}' | base64 -w 0)
          
          gcloud run deploy turbulent-service \
            --image gcr.io/${{ vars.GCP_PROJECT_ID }}/turbulent-service \
            --platform managed \
            --region us-central1 \
            --allow-unauthenticated \
            --service-account=${{ vars.GCP_SERVICE_ACCOUNT_NAME }} \
            --set-env-vars "MONGO_USER=${{ secrets.MONGO_USER }},MONGO_PASSWORD=${{ secrets.MONGO_PASSWORD }},MONGO_CLUSTER=${{ vars.MONGO_CLUSTER }},MONGO_APP_NAME=${{ vars.MONGO_APP_NAME }},MONGO_HOST=${{ vars.MONGO_HOST }},GOOGLE_CLIENT_ID=${{ vars.GOOGLE_CLIENT_ID }},MONGO_DB_NAME=${{ vars.MONGO_DB_NAME }},GCS_BUCKET_NAME=${{ vars.GCS_BUCKET_NAME }}" \
            --set-env-vars "GOOGLE_APPLICATION_CREDENTIALS_JSON_B64=${GCP_CREDS_B64}" \
            --timeout=600s

      - name: Deploy Frontend
        if: matrix.component == 'frontend' && steps.should-deploy.outputs.deploy == 'true'
        run: |
          echo "üöÄ Deploying Frontend (files changed)"
          gcloud builds submit ./frontend --tag gcr.io/${{ vars.GCP_PROJECT_ID }}/turbulent-frontend --project=${{ vars.GCP_PROJECT_ID }}
          gcloud run deploy turbulent-frontend \
            --image gcr.io/${{ vars.GCP_PROJECT_ID }}/turbulent-frontend \
            --platform managed \
            --region us-central1 \
            --project=${{ vars.GCP_PROJECT_ID }} \
            --allow-unauthenticated \
            --set-env-vars GOOGLE_CLIENT_ID=${{ vars.GOOGLE_CLIENT_ID }},GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }},NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }},NEXTAUTH_URL=${{ vars.NEXTAUTH_URL }},NEXT_PUBLIC_API_URL=${{ vars.NEXT_PUBLIC_API_URL }},NEXTAUTH_DEBUG=${{ vars.NEXTAUTH_DEBUG }},UNSAFE_EVAL=${{ vars.UNSAFE_EVAL }} \
            --timeout=600s

      - name: Make Frontend Public
        if: matrix.component == 'frontend' && steps.should-deploy.outputs.deploy == 'true'
        run: |
          gcloud run services add-iam-policy-binding turbulent-frontend \
            --region us-central1 \
            --project=${{ vars.GCP_PROJECT_ID }} \
            --member="allUsers" \
            --role="roles/run.invoker" \
            --quiet

      - name: Deploy Video Processing Function
        if: matrix.component == 'video-function' && steps.should-deploy.outputs.deploy == 'true'
        run: |
          echo "üöÄ Deploying Video Function (files changed)"
          
          # Build MongoDB URI from secrets/vars
          MONGODB_URI="mongodb+srv://${{ secrets.MONGO_USER }}:${{ secrets.MONGO_PASSWORD }}@${{ vars.MONGO_HOST }}/${{ vars.MONGO_DB_NAME }}?retryWrites=true&w=majority&appName=${{ vars.MONGO_APP_NAME }}"
          
          # Deploy the Cloud Function from Dockerfile
          gcloud functions deploy video-processor \
            --gen2 \
            --runtime=python311 \
            --project=${{ vars.GCP_PROJECT_ID }} \
            --region=us-central1 \
            --source=./cloud-functions/video-processor \
            --entry-point=process_video \
            --trigger-event-filters="type=google.cloud.storage.object.v1.finalized" \
            --trigger-event-filters="bucket=${{ vars.GCS_BUCKET_NAME }}" \
            --set-env-vars="GCS_BUCKET_NAME=${{ vars.GCS_BUCKET_NAME }},MONGODB_URI=${MONGODB_URI},API_BASE_URL=${{ vars.NEXT_PUBLIC_API_URL }}" \
            --memory=2GiB \
            --timeout=540s \
            --max-instances=5 \
            --cpu=1 \
            --service-account="${{ vars.GCP_SERVICE_ACCOUNT_NAME }}"

  # Summary job to show what was deployed
  deployment-summary:
    runs-on: ubuntu-latest
    needs: [detect-changes, deploy]
    if: always()
    steps:
      - name: Deployment Summary
        run: |
          echo "## Deployment Summary üìã"
          echo "Backend Changed: ${{ needs.detect-changes.outputs.backend }}"
          echo "Frontend Changed: ${{ needs.detect-changes.outputs.frontend }}"
          echo "Video Function Changed: ${{ needs.detect-changes.outputs.video-function }}"
          echo ""
          if [ "${{ needs.detect-changes.outputs.backend }}" == "true" ]; then
            echo "‚úÖ Backend deployed"
          else
            echo "‚è≠Ô∏è Backend skipped (no changes)"
          fi
          
          if [ "${{ needs.detect-changes.outputs.frontend }}" == "true" ]; then
            echo "‚úÖ Frontend deployed"
          else
            echo "‚è≠Ô∏è Frontend skipped (no changes)"
          fi
          
          if [ "${{ needs.detect-changes.outputs.video-function }}" == "true" ]; then
            echo "‚úÖ Video Function deployed"
          else
            echo "‚è≠Ô∏è Video Function skipped (no changes)"
          fi
