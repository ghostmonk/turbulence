---
description: Comprehensive overview of the Grafana IRM project architecture, features, and codebase organization. This rule should be referenced for all development tasks to ensure proper understanding of the system's components and their interactions.
globs: 
  - "backend/oncall/**"
  - "backend/incident/**"
  - "backend/oncall-heartbeat/**"
  - "packages/@plugins/grafana-*-app/**"
  - "dev/**"
---
# Grafana IRM (Incident Response and Management) Project Overview

> **Note**: This project overview should be referenced and considered for ALL tasks within this codebase. It provides essential context about the project's architecture, features, and structure that will help inform any changes or additions to the system.

## Project Description

Grafana IRM is a comprehensive incident response and management plugin for Grafana that combines alert management, on-call scheduling, and incident management capabilities. This plugin operates within a Grafana stack and is currently transitioning from two separate plugins (Grafana OnCall and Grafana Incident) into a unified solution.

## Core Features

### Alert Management and Integrations

- **Alert Integration System**
  - Receives incoming alerts from monitoring systems
  - Groups alerts into "Alert Groups" based on configurable grouping templates
  - Supports Jinja2 templates for customizing alert notifications
  - Allows label attachment to Alert Groups
  - Includes special "Direct Paging" integrations auto-generated for each Grafana team

### Routes and Escalation

- **Routes**

  - Live within Integrations
  - Use Jinja2 templates to evaluate alert payloads
  - Can trigger notifications to chatops channels
  - Link to escalation chains for alert handling

- **Escalation Chains**
  - Define multi-step escalation processes
  - Support different notification types (default/important)
  - Can include wait periods between steps
  - Integrate with on-call schedules

### ChatOps Integration

- **Supported Platforms**
  - Slack
  - Microsoft Teams
- **Key Features**
  - Alert group notifications and management
  - Direct paging via /escalate command
  - Incident management integration
  - Interactive alert actions (acknowledge, resolve, etc.)

### On-Call Management

- **Schedules**
  - Define rotation layers and shifts
  - Support for schedule overrides
  - Shift swap request system for temporary coverage changes
- **Personal Notification Rules**
  - Configurable for both "important" and "default" notifications
  - Customizable per user

### Additional Features

- **Insights Dashboard**
  - Alert group analytics
  - Team-based metrics
  - MTTR (Mean Time To Resolve) tracking
- **Outgoing Webhooks**
  - Configurable for various system events
  - Integration with external systems
- **Incident Management**
  - Incident declaration and tracking
  - Integration with collaboration tools (Slack/Teams channels, Google Docs for PIR)
  - Documentation capabilities

## Project Structure

```
.
├── .github/                 # GitHub workflows, issue/PR templates
├── backend/
│   ├── oncall/             # Python/Django backend for Incident Response
│   ├── oncall-heartbeat/   # Healthcheck bot for alert group creation
│   └── incident/           # Golang backend for Incident Management
├── dev/                    # Local development setup (Tilt)
├── docs/                   # Public documentation
└── packages/
    └── @plugins/          # Frontend plugin code
        ├── grafana-incident-app/
        │   └── pkg/       # Go backend plugin (runs on Grafana)
        ├── grafana-irm-app/
        │   └── pkg/       # Go backend plugin (runs on Grafana)
        └── grafana-oncall-app/
            └── pkg/       # Go backend plugin (runs on Grafana)
```

## Architecture Overview

### Backend Services

#### OnCall Backend (Django)
- Python/Django application for Incident Response
- Two separate Django apps for API endpoints:
  - Internal API: Used by web plugin and mobile app
  - Public API: External access via OnCall API keys (being deprecated in favor of Grafana service account tokens)
- Uses Celery for background task processing
  - Key tasks include Grafana sync (org/teams/user data)
  - Various other background jobs
- MySQL database for data persistence
- Supports full RBAC (Role-Based Access Control) for authentication and authorization

#### Incident Backend (Go)
- Golang application for Incident Management
- MySQL database (separate from OnCall)
- Basic role authentication (Viewer, Editor, Admin)

### Backend Plugins
- Go-based services that run within Grafana pods
- Located in `pkg/` directories within each plugin frontend
- Provide API endpoints for plugin-to-backend communication
- Act as intermediaries between plugin frontends and main backends
- Handle communication with respective backend services

### Deployment
- All components are deployed on Kubernetes (both production and development)
- Uses Tilt for local development orchestration

### Client Applications
- Web Plugin (This Repository)
  - Main web interface integrated into Grafana
  - Communicates primarily with internal API
- Mobile App (Separate Repository)
  - Native mobile application for on-the-go access
  - Integrates with OnCall's internal API
  - Codebase maintained separately from this repository

## Current State

The project is undergoing a significant transition:

- Merging Grafana OnCall and Grafana Incident into unified Grafana IRM
- Legacy directories (tmp-incident, tmp-oncall) are being phased out
- Moving towards a single, cohesive plugin architecture

## Development Notes

- Local development uses Tilt for Kubernetes orchestration
- Plugin operates within Grafana environment
- Supports multiple notification channels and integration points
- Uses both Python (Django/Celery for OnCall) and Golang (Incident) backends
- Backend plugins (Go) run directly on Grafana pods
- Separate MySQL databases for OnCall and Incident backends
