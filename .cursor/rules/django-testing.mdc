---
description: Best practices for writing and organizing Django tests in the OnCall backend. Emphasizes reusing existing test files and fixtures, and following established testing patterns.
globs: 
  - backend/oncall/**/*
---
# Django Testing Best Practices

## Test File Organization
When adding new tests:
1. FIRST check if the function/module you're testing already has a test file in the same Django app
2. If a test file exists, add your new tests there instead of creating a new file
3. Only create a new test file if you're testing a completely new module/functionality

## Fixture Usage
When writing tests that need fixtures:
1. FIRST look for existing fixtures:
   - Check other test functions in the same file
   - Check other test files in the same Django app
   - Check conftest.py files (both local to the app and project-wide)
2. Reuse existing fixtures whenever possible, even if they provide more functionality than you need
3. Only create new fixtures as a last resort, and when you do:
   - Add them to an existing conftest.py file
   - Document their purpose and usage
   - Make them as reusable as possible for future tests

## Test Structure
1. Keep test files focused and organized:
   - Group related tests together
   - Use clear, descriptive test names
   - Add docstrings explaining test purpose
2. Follow existing patterns:
   - Match the style of existing tests
   - Use similar assertions and patterns
   - Maintain consistency with existing test structure

## Examples
Bad:
```python
# Creating a new test file when one exists
backend/oncall/apps/google/tests/test_tasks.py  # DON'T create this
backend/oncall/apps/google/tests/test_sync_out_of_office_calendar_events_for_user.py  # Already exists

# Creating new fixtures when similar ones exist
@pytest.fixture
def user(make_organization):  # DON'T create this
    org = make_organization()
    return User.objects.create(organization=org)  # Instead, use existing make_user_for_organization
```

Good:
```python
# Adding tests to existing file
@pytest.mark.django_db
def test_my_new_functionality(
    make_organization_and_user,  # Reusing existing fixture
    make_user_for_organization,  # Reusing existing fixture
):
    # Test implementation
```
