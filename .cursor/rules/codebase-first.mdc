---
description: Core principle for working with the OnCall codebase - always understand and explore existing code before making changes or additions. This helps maintain consistency and prevents duplication.
globs: 
  - backend/oncall/**/*
---
# Understand Existing Code First

## Core Principle
ALWAYS explore and understand the existing codebase before making changes or additions.

## Steps to Follow
1. When modifying functionality:
   - Search for existing implementations
   - Look for similar patterns in the codebase
   - Check for related test files
   - Understand the existing conventions

2. When adding new code:
   - Check if similar functionality exists
   - Look for reusable components/utilities
   - Follow existing patterns and conventions
   - Integrate with existing code rather than duplicating

3. When writing tests:
   - Look for existing test files for the module
   - Check for similar test patterns
   - Reuse existing fixtures and utilities
   - Follow established testing conventions

## Examples
Bad:
```python
# Don't create new implementations without checking existing code
def my_new_function():  # DON'T write this without checking if similar exists
    pass

# Don't create new test files without checking existing ones
test_my_feature.py  # DON'T create without checking for existing test files
```

Good:
```python
# First search for existing implementations
existing_implementation = codebase_search("similar functionality")
# First check for existing test files
existing_tests = file_search("test_*.py")
```

## Common Mistakes to Avoid
1. Writing new code without searching for existing solutions
2. Creating new test files without checking for existing ones
3. Writing new fixtures without checking existing ones
4. Duplicating functionality that already exists
5. Not following established patterns and conventions
